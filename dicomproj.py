# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dicomDesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from tkinter import font
from PyQt5 import QtCore, QtGui, QtWidgets
import pydicom as dicom    
import matplotlib.pyplot as plt 
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas  
from matplotlib.figure import Figure
import numpy as np
import os
import glob
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget
from PySide6.QtWidgets import QApplication, QPushButton
from PySide6.QtCore import Slot
from PyQt5.QtGui import QPalette, QColor
import sys
from turtle import title
from pathlib import Path


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2225, 1025)
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(680, 120, 571, 351))
        self.layoutWidget.setObjectName("layoutWidget")

        #sagital slider
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.sagital_slider = QtWidgets.QSlider(self.layoutWidget)
        self.sagital_slider.setOrientation(QtCore.Qt.Horizontal)
        self.sagital_slider.setObjectName("sagital_slider")
        self.sagital_slider.setMinimum(100)
        self.sagital_slider.setMaximum(207)
        self.verticalLayout_3.addWidget(self.sagital_slider)
        self.layoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_2.setGeometry(QtCore.QRect(50, 490, 561, 431))
        self.layoutWidget_2.setObjectName("layoutWidget_2")

        #coronal slider
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.coronal_slider = QtWidgets.QSlider(self.layoutWidget_2)
        self.coronal_slider.setOrientation(QtCore.Qt.Horizontal)
        self.coronal_slider.setObjectName("coronal_slider")
        self.coronal_slider.setMinimum(100)
        self.coronal_slider.setMaximum(270)
        self.verticalLayout_4.addWidget(self.coronal_slider)
        self.layoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_3.setGeometry(QtCore.QRect(680, 490, 571, 431))
        self.layoutWidget_3.setObjectName("layoutWidget_3")

        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget_3)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.forth_slider = QtWidgets.QSlider(self.layoutWidget_3)
        self.forth_slider.setOrientation(QtCore.Qt.Horizontal)
        self.forth_slider.setObjectName("forth_slider")
        self.verticalLayout_5.addWidget(self.forth_slider)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(50, 120, 561, 351))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.axial_slider = QtWidgets.QSlider(self.layoutWidget1)
        self.axial_slider.setOrientation(QtCore.Qt.Horizontal)
        self.axial_slider.setObjectName("axial_slider")
        self.axial_slider.setMinimum(100)
        self.axial_slider.setMaximum(105)
        self.verticalLayout.addWidget(self.axial_slider)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(1360, 0, 371, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(1350, 470, 371, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.home = QtWidgets.QToolButton(self.centralwidget)
        self.home.setGeometry(QtCore.QRect(50, 10, 81, 51))
        self.home.setStyleSheet("background-color: rgb(0, 0, 0);")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(str(Path(__file__).parent / "home2.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home.setIcon(icon)
        self.home.setIconSize(QtCore.QSize(60, 60))
        self.home.setObjectName("home")
        self.profile = QtWidgets.QToolButton(self.centralwidget)
        self.profile.setGeometry(QtCore.QRect(410, 10, 91, 51))
        self.profile.setStyleSheet("background-color: rgb(0, 0, 0);")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(str(Path(__file__).parent / "profile.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.profile.setIcon(icon1)
        self.profile.setIconSize(QtCore.QSize(60, 60))
        self.profile.setObjectName("profile")
        self.save = QtWidgets.QToolButton(self.centralwidget)
        self.save.setGeometry(QtCore.QRect(160, 10, 91, 51))
        self.save.setStyleSheet("background-color: rgb(0, 0, 0);")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(str(Path(__file__).parent / "save.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save.setIcon(icon2)
        self.save.setIconSize(QtCore.QSize(70, 70))
        self.save.setObjectName("save")
        self.logout = QtWidgets.QToolButton(self.centralwidget)
        self.logout.setGeometry(QtCore.QRect(530, 10, 81, 51))
        self.logout.setStyleSheet("background-color: rgb(0, 0, 0);")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(str(Path(__file__).parent / "out.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logout.setIcon(icon3)
        self.logout.setIconSize(QtCore.QSize(70, 70))
        self.logout.setObjectName("logout")
        self.upload = QtWidgets.QToolButton(self.centralwidget)
        self.upload.setGeometry(QtCore.QRect(280, 10, 101, 51))
        self.upload.setStyleSheet("background-color: rgb(0, 0, 0);")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(str(Path(__file__).parent / "upload.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.upload.setIcon(icon4)
        self.upload.setIconSize(QtCore.QSize(50, 50))
        self.upload.setObjectName("upload")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(1300, 80, 501, 381))
        self.plainTextEdit.setStyleSheet("background-color: rbg(255, 255, 255);")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(1300, 520, 511, 401))
        self.plainTextEdit_2.setStyleSheet("background-color: rbg(255, 255, 255);")
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.horizontalScrollBar = QtWidgets.QScrollBar(self.centralwidget)
        self.horizontalScrollBar.setGeometry(QtCore.QRect(1300, 910, 511, 16))
        self.horizontalScrollBar.setStyleSheet("background-color: rbg(255, 255, 255);")
        self.horizontalScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalScrollBar.setObjectName("horizontalScrollBar")
        self.horizontalScrollBar_2 = QtWidgets.QScrollBar(self.centralwidget)
        self.horizontalScrollBar_2.setGeometry(QtCore.QRect(1300, 450, 501, 16))
        self.horizontalScrollBar_2.setStyleSheet("background-color: rbg(255, 255, 255);")
        self.horizontalScrollBar_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalScrollBar_2.setObjectName("horizontalScrollBar_2")
        self.verticalScrollBar = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScrollBar.setGeometry(QtCore.QRect(1800, 520, 16, 391))
        self.verticalScrollBar.setStyleSheet("background-color: rbg(255, 255, 255);")
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.plainTextEdit.setFont(QtGui.QFont('Times New Roman', 14))
        self.plainTextEdit_2.setFont(QtGui.QFont('Times New Roman', 14))
        self.verticalScrollBar_2 = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScrollBar_2.setGeometry(QtCore.QRect(1790, 80, 16, 371))
        self.verticalScrollBar_2.setStyleSheet("background-color: rbg(255, 255, 255);")
        self.verticalScrollBar_2.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar_2.setObjectName("verticalScrollBar_2")
        self.patientButton = QtWidgets.QPushButton(self.centralwidget)
        #line connect, get the button that get the icon ///not icon name
        #button name
        self.upload.clicked.connect(self.selectFile)
        self.patientButton.setGeometry(QtCore.QRect(710, 10, 201, 61))
        self.patientButton.clicked.connect(self.showdata)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.patientButton.setFont(font)
        self.patientButton.setStyleSheet("background-color: rgb(144,201,244);\n"
"color: rgb(255, 255, 255);")
        self.patientButton.setObjectName("patientButton")
        self.dicomButton = QtWidgets.QPushButton(self.centralwidget)
        self.dicomButton.setGeometry(QtCore.QRect(950, 10, 201, 61))
        self.dicomButton.clicked.connect(self.showdata2)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.dicomButton.setFont(font)
        self.dicomButton.setStyleSheet("background-color: rgb(144,201,244);\n"
"color: rgb(255, 255, 255);")
        self.dicomButton.setObjectName("dicomButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2225, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        #layout1
        #to make white space to display the imgs
        self.figure1=plt.figure()
        # self.figure1.set_title('Axial')
        self.canvas1=FigureCanvas(self.figure1)
        
        self.figure1.set_facecolor("black")
        #to add verticallayout to the canvas
        self.verticalLayout.addWidget(self.canvas1)

        #l valuechanged dy esmha signal, (slot),connect is the operation
        self.axial_slider.valueChanged.connect(self.plotsliderAxial)

        #layout2
        self.figure2=plt.figure()
        self.figure2.set_facecolor("black")
        self.canvas2=FigureCanvas(self.figure2)
        self.verticalLayout_3.addWidget(self.canvas2)
        self.sagital_slider.valueChanged.connect(self.plotsliderSagtial)
        

        #layout3
        self.figure3=plt.figure()
        self.figure3.set_facecolor("black")
        self.canvas3=FigureCanvas(self.figure3)
        self.verticalLayout_4.addWidget(self.canvas3)

        self.coronal_slider.valueChanged.connect(self.plotsliderCoronal)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # layout 4
        self.figure4=plt.figure()
        self.figure4.set_facecolor("black")
        self.canvas4=FigureCanvas(self.figure2)
        self.verticalLayout_5.addWidget(self.canvas4)
        # self.forth_slider.valueChanged.connect(self.plotslidertrans)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Patient Information"))
        self.label_2.setText(_translate("MainWindow", "DICOM Information"))
        self.home.setText(_translate("MainWindow", "..."))
        self.profile.setText(_translate("MainWindow", "..."))
        self.save.setText(_translate("MainWindow", "..."))
        self.logout.setText(_translate("MainWindow", "..."))
        self.upload.setText(_translate("MainWindow", "..."))
        self.patientButton.setText(_translate("MainWindow", "Show Patient Information"))
        self.dicomButton.setText(_translate("MainWindow", "Show Dicom Information"))

    #axial function
    def plotsliderAxial(self,value):
        # path="C:/Users/ayawa/OneDrive/Desktop/Shereen/final_img_project/PAT008/PAT008/D0"+str(value)+".dcm"
        path=get_path+"\D0"+str(value)+".dcm"
        x=dicom.dcmread(path)
        mod=x.Modality 
        self.figure1.clear()
        ax=self.figure1.add_subplot(1,1,1 )
        ax.set_title("Axial\n Modality:_{}".format(mod),color='yellow')
        ax.imshow(x.pixel_array, 'gray')
        self.canvas1.draw()
        
    

    #sagtial function
    def plotsliderSagtial(self,value):
        # path="C:/Users/ayawa/OneDrive/Desktop/Shereen/final_img_project/PAT008/PAT008"
        path=str (get_path)
        ct_images=os.listdir(path)
        global slices_list
        slices_list= []
        slices = [dicom.read_file(path+'/'+s,force=True) for s in ct_images]
        mod=slices[2].Modality 
        slices = sorted(slices,key=lambda x:x.ImagePositionPatient[2])
        pixel_spacing = slices[0].PixelSpacing
        slices_thickess = slices[0].SliceThickness
        sagital_aspect_ratio = pixel_spacing[1]/slices_thickess
        coronal_aspect_ratio = slices_thickess/pixel_spacing[0]
        
        axial_aspect_ratio = pixel_spacing[1]/pixel_spacing[0]


        img_shape = list(slices[0].pixel_array.shape)
       
        img_shape.append(len(slices))
        
        volume3d=np.zeros(img_shape)
        cor=0
        sag=0 
       
        for i,s in enumerate(slices):

  
            array2D=s.pixel_array
            volume3d[:,:,i]= array2D 
            cor = cor-1
            sag = sag-1
            slices_list.append((
        
        (volume3d[:,:,i],axial_aspect_ratio),
        (np.flipud(volume3d[:,sag,:].T),sagital_aspect_ratio),
        (np.flipud(volume3d[cor,:,:].T),coronal_aspect_ratio)

        ))
        self.figure2.clear()
        ax2=self.figure2.add_subplot(1,1,1)
  

        ax2.imshow(slices_list[int(value)][1][0],'gray')
        ax2.set_title("Sagtial\nModality:_{}".format(mod),color='yellow')
        ax2.set_aspect(sagital_aspect_ratio)
        self.canvas2.draw()



    
    #coronal function
    def plotsliderCoronal(self,value):
        # path="C:/Users/ayawa/OneDrive/Desktop/Shereen/final_img_project/PAT008/PAT008"
        path=str (get_path)
        ct_images=os.listdir(path)
        global slices_list
        slices_list= []
        slices = [dicom.read_file(path+'/'+s,force=True) for s in ct_images]
        mod=slices[2].Modality
        slices = sorted(slices,key=lambda x:x.ImagePositionPatient[2])
        pixel_spacing = slices[0].PixelSpacing
        slices_thickess = slices[0].SliceThickness
        sagital_aspect_ratio = pixel_spacing[1]/slices_thickess
        coronal_aspect_ratio = slices_thickess/pixel_spacing[0]
        
        axial_aspect_ratio = pixel_spacing[1]/pixel_spacing[0]
        img_shape = list(slices[0].pixel_array.shape)
        img_shape.append(len(slices))
        volume3d=np.zeros(img_shape)
        cor=0
        sag=0 
       
        for i,s in enumerate(slices):
            array2D=s.pixel_array
            volume3d[:,:,i]= array2D 
            cor = cor-1
            sag = sag-1
            slices_list.append((
        
        (volume3d[:,:,i],axial_aspect_ratio),
        (np.flipud(volume3d[:,sag,:].T),sagital_aspect_ratio),
        (np.flipud(volume3d[cor,:,:].T),coronal_aspect_ratio)))

        self.figure3.clear()
        ax3=self.figure3.add_subplot(1,1,1)
        ax3.set_title("Coronal\nModality:_{}".format(mod),color='yellow')

        ax3.imshow(slices_list[int(value)][2][0],'gray')

        self.canvas3.draw()

    def selectFile(self):
        # print('c')
        fileName = QtWidgets.QFileDialog.getExistingDirectory(None, QtCore.QDir.rootPath() , '*')
        global get_path
        get_path=fileName

    def showdata(self):
        path="D:\semster\PAT008\PAT008"
        path=str(get_path)
        ct_images=os.listdir(path)
        global slices_list
        slices_list= []
        ds = [dicom.read_file(path+'/'+s,force=True) for s in ct_images]
        
        x1=ds[2].PatientName
        x2=ds[2].PatientID
        x3=ds[2].Modality
        x4=ds[2].PatientSex
        x5=ds[2].PatientAge
        # x6=ds[2].InstanceCreationDate 
        # x7=ds[2].InstanceCreationTime  
        # x8=ds[2].XRayTubeCurrent  
        # x9=ds[2].ScanOptions   
        x10=ds[2].PatientWeight 
        x11=ds[2].PatientComments    
    
        data =("Patient's Name:\t {}\n Patient ID:\t{}\nModality:\t{}\nGender:\t{}\n Patient sex :\t{}\n Patient Age:\t{}\n Patient Weight:\t{}\n patient comments:\t{}".format(x1, x2,x3,x4,x5,x10,x11,font=30))
        self.plainTextEdit.setPlainText(data)

    def showdata2(self):
            path="D:\semster\PAT008\PAT008"
            path=str(get_path)
            ct_images=os.listdir(path)
            global slices_list
            slices_list= []
            ds = [dicom.read_file(path+'/'+s,force=True) for s in ct_images]
            y1=ds[2].Rows* ds[2].Columns
            y2=ds[2].PixelSpacing
            y3=ds[2].ImageType 
            y4=ds[2].SOPClassUID  
            # y5=ds[2].PixelData    
            y6=ds[2].BitsStored  
            y7=ds[2].ManufacturerModelName  
            x10=ds[2].SliceThickness    
            x11=ds[2].KVP     
            x12=ds[2].DataCollectionDiameter   
            x13=ds[2].SoftwareVersions 
            x14=ds[2].ProtocolName 
            x15=ds[2].SpatialResolution
            x16=ds[2].ReconstructionDiameter   
            # y7=ds[2].SourceApplicationEntityTitle 
            data2 =("Image size:\t{}\n pixel Spacing:\t{}\nImage Type:\t{}\nSOP Class UID:\t{}\nBits Stored:\t{}\nManufacturers Model Name:\t{}\nSlice Thickness:\t{}\nKVP:\t{}\n Data Collection Diameter:\t{}\nSoftware Versions:\t{}\nProtocolName:\t{}\nSpatial Resolution:\t{}\nReconstruction Diameter:\t{}".format(y1,y2,y3,y4,y6,y7,x10,x11,x12,x13,x14,x15,x16,font=30))
            self.plainTextEdit_2.setPlainText(data2)




        #    self.setupUi.textedit.setText(self.date.toStrings())
        # self.textedit.setText(date)
        # print(f"Patient's Name...: {ds[2].PatientName}")
        # print(f"Patient ID.......: {ds[2].PatientID}")
        # print(f"Modality.........: {ds[2].Modality}")
        # print(f"Study Date.......: {ds[2].StudyDate}")
        # print(f"Image size.......: {ds[2].Rows} x {ds[2].Columns}")
        # print(f"Pixel Spacing....: {ds[2].PixelSpacing}")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
